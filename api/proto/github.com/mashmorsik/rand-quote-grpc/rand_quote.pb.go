// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: rand_quote.proto

package randquotev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Name int32

const (
	Name_ALBUS_DUMBLEDORE     Name = 0
	Name_HERMIONE_GRANGER     Name = 1
	Name_RON_WEASLEY          Name = 2
	Name_SEVERUS_SNAPE        Name = 3
	Name_PROFESSOR_MCGONAGALL Name = 4
	Name_LUNA_LOVEGOOD        Name = 5
	Name_HAGRID               Name = 6
	Name_CLOSE_CONNECTION     Name = 7
)

// Enum value maps for Name.
var (
	Name_name = map[int32]string{
		0: "ALBUS_DUMBLEDORE",
		1: "HERMIONE_GRANGER",
		2: "RON_WEASLEY",
		3: "SEVERUS_SNAPE",
		4: "PROFESSOR_MCGONAGALL",
		5: "LUNA_LOVEGOOD",
		6: "HAGRID",
		7: "CLOSE_CONNECTION",
	}
	Name_value = map[string]int32{
		"ALBUS_DUMBLEDORE":     0,
		"HERMIONE_GRANGER":     1,
		"RON_WEASLEY":          2,
		"SEVERUS_SNAPE":        3,
		"PROFESSOR_MCGONAGALL": 4,
		"LUNA_LOVEGOOD":        5,
		"HAGRID":               6,
		"CLOSE_CONNECTION":     7,
	}
)

func (x Name) Enum() *Name {
	p := new(Name)
	*p = x
	return p
}

func (x Name) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Name) Descriptor() protoreflect.EnumDescriptor {
	return file_rand_quote_proto_enumTypes[0].Descriptor()
}

func (Name) Type() protoreflect.EnumType {
	return &file_rand_quote_proto_enumTypes[0]
}

func (x Name) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Name.Descriptor instead.
func (Name) EnumDescriptor() ([]byte, []int) {
	return file_rand_quote_proto_rawDescGZIP(), []int{0}
}

type Quote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quote string `protobuf:"bytes,1,opt,name=quote,proto3" json:"quote,omitempty"`
}

func (x *Quote) Reset() {
	*x = Quote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rand_quote_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quote) ProtoMessage() {}

func (x *Quote) ProtoReflect() protoreflect.Message {
	mi := &file_rand_quote_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quote.ProtoReflect.Descriptor instead.
func (*Quote) Descriptor() ([]byte, []int) {
	return file_rand_quote_proto_rawDescGZIP(), []int{0}
}

func (x *Quote) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

type QuotesChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name Name `protobuf:"varint,1,opt,name=name,proto3,enum=github.com.mashmorsik.rand.quote.grpc.v1.Name" json:"name,omitempty"`
}

func (x *QuotesChatRequest) Reset() {
	*x = QuotesChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rand_quote_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotesChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotesChatRequest) ProtoMessage() {}

func (x *QuotesChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rand_quote_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotesChatRequest.ProtoReflect.Descriptor instead.
func (*QuotesChatRequest) Descriptor() ([]byte, []int) {
	return file_rand_quote_proto_rawDescGZIP(), []int{1}
}

func (x *QuotesChatRequest) GetName() Name {
	if x != nil {
		return x.Name
	}
	return Name_ALBUS_DUMBLEDORE
}

type QuotesChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quote string `protobuf:"bytes,1,opt,name=quote,proto3" json:"quote,omitempty"`
}

func (x *QuotesChatResponse) Reset() {
	*x = QuotesChatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rand_quote_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotesChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotesChatResponse) ProtoMessage() {}

func (x *QuotesChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rand_quote_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotesChatResponse.ProtoReflect.Descriptor instead.
func (*QuotesChatResponse) Descriptor() ([]byte, []int) {
	return file_rand_quote_proto_rawDescGZIP(), []int{2}
}

func (x *QuotesChatResponse) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

type SeveralCharactersQuotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name Name `protobuf:"varint,1,opt,name=name,proto3,enum=github.com.mashmorsik.rand.quote.grpc.v1.Name" json:"name,omitempty"`
}

func (x *SeveralCharactersQuotesRequest) Reset() {
	*x = SeveralCharactersQuotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rand_quote_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeveralCharactersQuotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeveralCharactersQuotesRequest) ProtoMessage() {}

func (x *SeveralCharactersQuotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rand_quote_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeveralCharactersQuotesRequest.ProtoReflect.Descriptor instead.
func (*SeveralCharactersQuotesRequest) Descriptor() ([]byte, []int) {
	return file_rand_quote_proto_rawDescGZIP(), []int{3}
}

func (x *SeveralCharactersQuotesRequest) GetName() Name {
	if x != nil {
		return x.Name
	}
	return Name_ALBUS_DUMBLEDORE
}

type SeveralCharacterQuotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quotes map[string]string `protobuf:"bytes,1,rep,name=quotes,proto3" json:"quotes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SeveralCharacterQuotesResponse) Reset() {
	*x = SeveralCharacterQuotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rand_quote_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeveralCharacterQuotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeveralCharacterQuotesResponse) ProtoMessage() {}

func (x *SeveralCharacterQuotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rand_quote_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeveralCharacterQuotesResponse.ProtoReflect.Descriptor instead.
func (*SeveralCharacterQuotesResponse) Descriptor() ([]byte, []int) {
	return file_rand_quote_proto_rawDescGZIP(), []int{4}
}

func (x *SeveralCharacterQuotesResponse) GetQuotes() map[string]string {
	if x != nil {
		return x.Quotes
	}
	return nil
}

type ListQuotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name Name `protobuf:"varint,1,opt,name=name,proto3,enum=github.com.mashmorsik.rand.quote.grpc.v1.Name" json:"name,omitempty"`
}

func (x *ListQuotesRequest) Reset() {
	*x = ListQuotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rand_quote_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuotesRequest) ProtoMessage() {}

func (x *ListQuotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rand_quote_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuotesRequest.ProtoReflect.Descriptor instead.
func (*ListQuotesRequest) Descriptor() ([]byte, []int) {
	return file_rand_quote_proto_rawDescGZIP(), []int{5}
}

func (x *ListQuotesRequest) GetName() Name {
	if x != nil {
		return x.Name
	}
	return Name_ALBUS_DUMBLEDORE
}

type ListQuotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quote string `protobuf:"bytes,1,opt,name=quote,proto3" json:"quote,omitempty"`
}

func (x *ListQuotesResponse) Reset() {
	*x = ListQuotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rand_quote_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuotesResponse) ProtoMessage() {}

func (x *ListQuotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rand_quote_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuotesResponse.ProtoReflect.Descriptor instead.
func (*ListQuotesResponse) Descriptor() ([]byte, []int) {
	return file_rand_quote_proto_rawDescGZIP(), []int{6}
}

func (x *ListQuotesResponse) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

type RandQuoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name Name `protobuf:"varint,1,opt,name=name,proto3,enum=github.com.mashmorsik.rand.quote.grpc.v1.Name" json:"name,omitempty"`
}

func (x *RandQuoteRequest) Reset() {
	*x = RandQuoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rand_quote_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandQuoteRequest) ProtoMessage() {}

func (x *RandQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rand_quote_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandQuoteRequest.ProtoReflect.Descriptor instead.
func (*RandQuoteRequest) Descriptor() ([]byte, []int) {
	return file_rand_quote_proto_rawDescGZIP(), []int{7}
}

func (x *RandQuoteRequest) GetName() Name {
	if x != nil {
		return x.Name
	}
	return Name_ALBUS_DUMBLEDORE
}

type RandQuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quote string `protobuf:"bytes,1,opt,name=quote,proto3" json:"quote,omitempty"`
}

func (x *RandQuoteResponse) Reset() {
	*x = RandQuoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rand_quote_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandQuoteResponse) ProtoMessage() {}

func (x *RandQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rand_quote_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandQuoteResponse.ProtoReflect.Descriptor instead.
func (*RandQuoteResponse) Descriptor() ([]byte, []int) {
	return file_rand_quote_proto_rawDescGZIP(), []int{8}
}

func (x *RandQuoteResponse) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

var File_rand_quote_proto protoreflect.FileDescriptor

var file_rand_quote_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x61, 0x73, 0x68, 0x6d, 0x6f, 0x72, 0x73, 0x69, 0x6b, 0x2e, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x22, 0x1d, 0x0a, 0x05,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x22, 0x57, 0x0a, 0x11, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x73, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x73, 0x68,
	0x6d, 0x6f, 0x72, 0x73, 0x69, 0x6b, 0x2e, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x12, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x22, 0x64, 0x0a, 0x1e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61,
	0x73, 0x68, 0x6d, 0x6f, 0x72, 0x73, 0x69, 0x6b, 0x2e, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x73, 0x68, 0x6d, 0x6f, 0x72, 0x73, 0x69,
	0x6b, 0x2e, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x57, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x73, 0x68, 0x6d, 0x6f, 0x72, 0x73, 0x69, 0x6b, 0x2e, 0x72, 0x61,
	0x6e, 0x64, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x10, 0x52, 0x61, 0x6e, 0x64, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x73, 0x68, 0x6d, 0x6f, 0x72, 0x73, 0x69,
	0x6b, 0x2e, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x29, 0x0a, 0x11, 0x52, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2a, 0xa5, 0x01, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c, 0x42, 0x55, 0x53, 0x5f, 0x44, 0x55, 0x4d,
	0x42, 0x4c, 0x45, 0x44, 0x4f, 0x52, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x45, 0x52,
	0x4d, 0x49, 0x4f, 0x4e, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4e, 0x5f, 0x57, 0x45, 0x41, 0x53, 0x4c, 0x45, 0x59, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x56, 0x45, 0x52, 0x55, 0x53, 0x5f, 0x53, 0x4e, 0x41, 0x50,
	0x45, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x4f, 0x52,
	0x5f, 0x4d, 0x43, 0x47, 0x4f, 0x4e, 0x41, 0x47, 0x41, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x4c, 0x55, 0x4e, 0x41, 0x5f, 0x4c, 0x4f, 0x56, 0x45, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x05,
	0x12, 0x0a, 0x0a, 0x06, 0x48, 0x41, 0x47, 0x52, 0x49, 0x44, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x07, 0x32, 0xe7, 0x04, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x83, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x3a,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x73, 0x68,
	0x6d, 0x6f, 0x72, 0x73, 0x69, 0x6b, 0x2e, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x73, 0x68, 0x6d, 0x6f, 0x72, 0x73,
	0x69, 0x6b, 0x2e, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x73, 0x68, 0x6d, 0x6f, 0x72, 0x73, 0x69, 0x6b, 0x2e, 0x72,
	0x61, 0x6e, 0x64, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x61, 0x73, 0x68, 0x6d, 0x6f, 0x72, 0x73, 0x69, 0x6b, 0x2e, 0x72, 0x61, 0x6e, 0x64,
	0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0xb4, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x61, 0x73, 0x68, 0x6d, 0x6f, 0x72, 0x73, 0x69, 0x6b, 0x2e, 0x72, 0x61, 0x6e,
	0x64, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x73, 0x68,
	0x6d, 0x6f, 0x72, 0x73, 0x69, 0x6b, 0x2e, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x8d, 0x01, 0x0a,
	0x0a, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x43, 0x68, 0x61, 0x74, 0x12, 0x3b, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x73, 0x68, 0x6d, 0x6f, 0x72,
	0x73, 0x69, 0x6b, 0x2e, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x73, 0x68, 0x6d, 0x6f, 0x72, 0x73, 0x69, 0x6b,
	0x2e, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x33, 0x5a, 0x31,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x73, 0x68, 0x6d,
	0x6f, 0x72, 0x73, 0x69, 0x6b, 0x2f, 0x72, 0x61, 0x6e, 0x64, 0x2d, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x2d, 0x67, 0x72, 0x70, 0x63, 0x3b, 0x72, 0x61, 0x6e, 0x64, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rand_quote_proto_rawDescOnce sync.Once
	file_rand_quote_proto_rawDescData = file_rand_quote_proto_rawDesc
)

func file_rand_quote_proto_rawDescGZIP() []byte {
	file_rand_quote_proto_rawDescOnce.Do(func() {
		file_rand_quote_proto_rawDescData = protoimpl.X.CompressGZIP(file_rand_quote_proto_rawDescData)
	})
	return file_rand_quote_proto_rawDescData
}

var file_rand_quote_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rand_quote_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_rand_quote_proto_goTypes = []interface{}{
	(Name)(0),                              // 0: github.com.mashmorsik.rand.quote.grpc.v1.Name
	(*Quote)(nil),                          // 1: github.com.mashmorsik.rand.quote.grpc.v1.Quote
	(*QuotesChatRequest)(nil),              // 2: github.com.mashmorsik.rand.quote.grpc.v1.QuotesChatRequest
	(*QuotesChatResponse)(nil),             // 3: github.com.mashmorsik.rand.quote.grpc.v1.QuotesChatResponse
	(*SeveralCharactersQuotesRequest)(nil), // 4: github.com.mashmorsik.rand.quote.grpc.v1.SeveralCharactersQuotesRequest
	(*SeveralCharacterQuotesResponse)(nil), // 5: github.com.mashmorsik.rand.quote.grpc.v1.SeveralCharacterQuotesResponse
	(*ListQuotesRequest)(nil),              // 6: github.com.mashmorsik.rand.quote.grpc.v1.ListQuotesRequest
	(*ListQuotesResponse)(nil),             // 7: github.com.mashmorsik.rand.quote.grpc.v1.ListQuotesResponse
	(*RandQuoteRequest)(nil),               // 8: github.com.mashmorsik.rand.quote.grpc.v1.RandQuoteRequest
	(*RandQuoteResponse)(nil),              // 9: github.com.mashmorsik.rand.quote.grpc.v1.RandQuoteResponse
	nil,                                    // 10: github.com.mashmorsik.rand.quote.grpc.v1.SeveralCharacterQuotesResponse.QuotesEntry
}
var file_rand_quote_proto_depIdxs = []int32{
	0,  // 0: github.com.mashmorsik.rand.quote.grpc.v1.QuotesChatRequest.name:type_name -> github.com.mashmorsik.rand.quote.grpc.v1.Name
	0,  // 1: github.com.mashmorsik.rand.quote.grpc.v1.SeveralCharactersQuotesRequest.name:type_name -> github.com.mashmorsik.rand.quote.grpc.v1.Name
	10, // 2: github.com.mashmorsik.rand.quote.grpc.v1.SeveralCharacterQuotesResponse.quotes:type_name -> github.com.mashmorsik.rand.quote.grpc.v1.SeveralCharacterQuotesResponse.QuotesEntry
	0,  // 3: github.com.mashmorsik.rand.quote.grpc.v1.ListQuotesRequest.name:type_name -> github.com.mashmorsik.rand.quote.grpc.v1.Name
	0,  // 4: github.com.mashmorsik.rand.quote.grpc.v1.RandQuoteRequest.name:type_name -> github.com.mashmorsik.rand.quote.grpc.v1.Name
	8,  // 5: github.com.mashmorsik.rand.quote.grpc.v1.RandQuotes.GetQuote:input_type -> github.com.mashmorsik.rand.quote.grpc.v1.RandQuoteRequest
	6,  // 6: github.com.mashmorsik.rand.quote.grpc.v1.RandQuotes.ListQuotes:input_type -> github.com.mashmorsik.rand.quote.grpc.v1.ListQuotesRequest
	4,  // 7: github.com.mashmorsik.rand.quote.grpc.v1.RandQuotes.GetSeveralCharactersQuotes:input_type -> github.com.mashmorsik.rand.quote.grpc.v1.SeveralCharactersQuotesRequest
	2,  // 8: github.com.mashmorsik.rand.quote.grpc.v1.RandQuotes.QuotesChat:input_type -> github.com.mashmorsik.rand.quote.grpc.v1.QuotesChatRequest
	9,  // 9: github.com.mashmorsik.rand.quote.grpc.v1.RandQuotes.GetQuote:output_type -> github.com.mashmorsik.rand.quote.grpc.v1.RandQuoteResponse
	7,  // 10: github.com.mashmorsik.rand.quote.grpc.v1.RandQuotes.ListQuotes:output_type -> github.com.mashmorsik.rand.quote.grpc.v1.ListQuotesResponse
	5,  // 11: github.com.mashmorsik.rand.quote.grpc.v1.RandQuotes.GetSeveralCharactersQuotes:output_type -> github.com.mashmorsik.rand.quote.grpc.v1.SeveralCharacterQuotesResponse
	3,  // 12: github.com.mashmorsik.rand.quote.grpc.v1.RandQuotes.QuotesChat:output_type -> github.com.mashmorsik.rand.quote.grpc.v1.QuotesChatResponse
	9,  // [9:13] is the sub-list for method output_type
	5,  // [5:9] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_rand_quote_proto_init() }
func file_rand_quote_proto_init() {
	if File_rand_quote_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rand_quote_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rand_quote_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotesChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rand_quote_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotesChatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rand_quote_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeveralCharactersQuotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rand_quote_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeveralCharacterQuotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rand_quote_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQuotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rand_quote_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQuotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rand_quote_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandQuoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rand_quote_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandQuoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rand_quote_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rand_quote_proto_goTypes,
		DependencyIndexes: file_rand_quote_proto_depIdxs,
		EnumInfos:         file_rand_quote_proto_enumTypes,
		MessageInfos:      file_rand_quote_proto_msgTypes,
	}.Build()
	File_rand_quote_proto = out.File
	file_rand_quote_proto_rawDesc = nil
	file_rand_quote_proto_goTypes = nil
	file_rand_quote_proto_depIdxs = nil
}
