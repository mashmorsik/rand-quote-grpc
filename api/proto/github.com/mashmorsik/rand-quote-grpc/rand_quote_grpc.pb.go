// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: rand_quote.proto

package randquotev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RandQuotes_GetQuote_FullMethodName   = "/github.com.mashmorsik.rand.quote.grpc.v1.RandQuotes/GetQuote"
	RandQuotes_ListQuotes_FullMethodName = "/github.com.mashmorsik.rand.quote.grpc.v1.RandQuotes/ListQuotes"
)

// RandQuotesClient is the client API for RandQuotes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandQuotesClient interface {
	GetQuote(ctx context.Context, in *RandQuoteRequest, opts ...grpc.CallOption) (*RandQuoteResponse, error)
	ListQuotes(ctx context.Context, in *ListQuotesRequest, opts ...grpc.CallOption) (RandQuotes_ListQuotesClient, error)
}

type randQuotesClient struct {
	cc grpc.ClientConnInterface
}

func NewRandQuotesClient(cc grpc.ClientConnInterface) RandQuotesClient {
	return &randQuotesClient{cc}
}

func (c *randQuotesClient) GetQuote(ctx context.Context, in *RandQuoteRequest, opts ...grpc.CallOption) (*RandQuoteResponse, error) {
	out := new(RandQuoteResponse)
	err := c.cc.Invoke(ctx, RandQuotes_GetQuote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randQuotesClient) ListQuotes(ctx context.Context, in *ListQuotesRequest, opts ...grpc.CallOption) (RandQuotes_ListQuotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &RandQuotes_ServiceDesc.Streams[0], RandQuotes_ListQuotes_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &randQuotesListQuotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RandQuotes_ListQuotesClient interface {
	Recv() (*ListQuotesResponse, error)
	grpc.ClientStream
}

type randQuotesListQuotesClient struct {
	grpc.ClientStream
}

func (x *randQuotesListQuotesClient) Recv() (*ListQuotesResponse, error) {
	m := new(ListQuotesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RandQuotesServer is the server API for RandQuotes service.
// All implementations must embed UnimplementedRandQuotesServer
// for forward compatibility
type RandQuotesServer interface {
	GetQuote(context.Context, *RandQuoteRequest) (*RandQuoteResponse, error)
	ListQuotes(*ListQuotesRequest, RandQuotes_ListQuotesServer) error
	mustEmbedUnimplementedRandQuotesServer()
}

// UnimplementedRandQuotesServer must be embedded to have forward compatible implementations.
type UnimplementedRandQuotesServer struct {
}

func (UnimplementedRandQuotesServer) GetQuote(context.Context, *RandQuoteRequest) (*RandQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuote not implemented")
}
func (UnimplementedRandQuotesServer) ListQuotes(*ListQuotesRequest, RandQuotes_ListQuotesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListQuotes not implemented")
}
func (UnimplementedRandQuotesServer) mustEmbedUnimplementedRandQuotesServer() {}

// UnsafeRandQuotesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandQuotesServer will
// result in compilation errors.
type UnsafeRandQuotesServer interface {
	mustEmbedUnimplementedRandQuotesServer()
}

func RegisterRandQuotesServer(s grpc.ServiceRegistrar, srv RandQuotesServer) {
	s.RegisterService(&RandQuotes_ServiceDesc, srv)
}

func _RandQuotes_GetQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandQuotesServer).GetQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RandQuotes_GetQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandQuotesServer).GetQuote(ctx, req.(*RandQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RandQuotes_ListQuotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListQuotesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RandQuotesServer).ListQuotes(m, &randQuotesListQuotesServer{stream})
}

type RandQuotes_ListQuotesServer interface {
	Send(*ListQuotesResponse) error
	grpc.ServerStream
}

type randQuotesListQuotesServer struct {
	grpc.ServerStream
}

func (x *randQuotesListQuotesServer) Send(m *ListQuotesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RandQuotes_ServiceDesc is the grpc.ServiceDesc for RandQuotes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RandQuotes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.mashmorsik.rand.quote.grpc.v1.RandQuotes",
	HandlerType: (*RandQuotesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuote",
			Handler:    _RandQuotes_GetQuote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListQuotes",
			Handler:       _RandQuotes_ListQuotes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rand_quote.proto",
}
